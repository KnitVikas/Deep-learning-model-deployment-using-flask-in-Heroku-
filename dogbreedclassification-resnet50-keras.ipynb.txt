{"cells":[{"metadata":{"trusted":true},"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport warnings\nwarnings.simplefilter(action=\"ignore\", category=FutureWarning)\n# keras imports\nfrom keras.applications import ResNet16, preprocess_input\nfrom keras.preprocessing import image\nfrom keras.models import Model\nfrom keras.layers import Input\n#other imports\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nimport glob\nimport cv2\nimport h5py\nimport os\nimport datetime\nimport time\nimport re\nfrom tqdm import tqdm\nprint(os.listdir(\"../input\"))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from keras.layers import *\nfrom keras.models import *\nfrom keras.applications import *\nfrom keras.optimizers import *\nfrom keras.regularizers import *","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"import os\nos.chdir(\"/kaggle/working\")\n# os.getcwd()\n!ls","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train_path = '../input/dog-breed-identification/train/'\nlabels = pd.read_csv('../input/dog-breed-identification/labels.csv')\n\nmodel_dir = '../input/'\nlist_images = [train_path+f for f in os.listdir(train_path) if re.search('jpg|JPG', f)]\n\nprint(list_images[0:4])\ntrain_labels = os.listdir(train_path)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"n = len(labels)\nbreed = set(labels['breed'])\nn_class = len(breed)\nclass_to_num = dict(zip(breed, range(n_class)))\nn_class = len(breed)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"labels.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"yy = pd.value_counts(labels['breed'])\nprint(yy[0:5])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"targets_series = pd.Series(labels['breed'])\none_hot = pd.get_dummies(targets_series, sparse = True)\none_hot_labels = np.asarray(one_hot)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Data processing"},{"metadata":{"trusted":true},"cell_type":"code","source":"import cv2\nwidth = 331\norig_label = []\nX = np.zeros((n, width, width, 3), dtype=np.uint8)\ny = np.zeros((n, n_class), dtype=np.uint8)\norig_label = []\nfor i in tqdm(range(n)):\n    X[i] = cv2.resize(cv2.imread('../input/dog-breed-identification/train/%s.jpg' % labels['id'][i]), (width, width))\n    y[i] = one_hot_labels[i]\n    orig_label.append(labels['breed'][i])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"print(\"Number of Samples:\",X.shape[0])\nprint(y.shape)\nnum_class = y.shape[1]\nprint(\"Number of training lables:\",num_class)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from mpl_toolkits.axes_grid1 import ImageGrid\nimport matplotlib.pyplot as plt\ndef show_grid(image_list,nrows,ncols,figsize=(10,10),showaxis='off'):\n    if type(image_list) is not list:\n        if(image_list.shape[-1]==1):\n            image_list = [image_list[i,:,:,0] for i in range(image_list.shape[0])]\n        elif(image_list.shape[-1]==3):\n            image_list = [image_list[i,:,:,:] for i in range(image_list.shape[0])]\n    fig = plt.figure(None, figsize,frameon=False)\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(nrows, ncols),  # creates 2x2 grid of axes\n                     axes_pad=0.3,  # pad between axes in inch.\n                     share_all=True,\n                     )\n    for i in range(nrows*ncols):\n        ax = grid[i]\n        ax.imshow(image_list[i],cmap='Greys_r')  # The AxesGrid object work as a list of axes.\n        ax.axis('off')\n        ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"show_grid(X,4,5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df_test = pd.read_csv('../input/dog-breed-identification/sample_submission.csv')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":"n_test = len(df_test)\nX_test = np.zeros((n_test, width, width, 3), dtype=np.uint8)\nfor i in tqdm(range(n_test)):\n    X_test[i] = cv2.resize(cv2.imread('../input/dog-breed-identification/test/%s.jpg' % df_test['id'][i]), (width, width))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"del X_test","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Feature Extraction"},{"metadata":{"trusted":true},"cell_type":"code","source":"\n\ndef get_features(MODEL, data=X):\n    cnn_model = ResNet50(include_top=False, input_shape=(width, width, 3), weights='imagenet')\n    \n    inputs = Input((width, width, 3))\n    x = inputs\n    x = Lambda(preprocess_input, name='preprocessing')(x)\n    x = cnn_model(x)\n    x = GlobalAveragePooling2D()(x)\n    cnn_model = Model(inputs, x)\n    features = cnn_model.predict(data, batch_size=64, verbose=1)\n    return features","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"resnet_features = get_features(ResNet50, X)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Train model"},{"metadata":{"trusted":true},"cell_type":"code","source":"#Matrices\nfrom keras.callbacks import Callback,ModelCheckpoint\nimport tensorflow as tf\nimport keras.backend as K\n\nm = tf.keras.metrics.AUC(\n    num_thresholds=200,\n    curve=\"ROC\",\n    summation_method=\"interpolation\",\n    name=None,\n    dtype=None,\n    thresholds=None,\n    multi_label=False,\n    label_weights=None,\n)\n\nearly = tf.keras.callbacks.EarlyStopping( patience=20,\n                                          min_delta=0.001,\n                                          restore_best_weights=True)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":""},{"metadata":{"trusted":true},"cell_type":"code","source":"inputs = Input(resnet_features.shape[1:])\nx = inputs\nx = Dropout(0.5)(x)\nx = Dense(n_class, activation='softmax')(x)\nmodel = Model(inputs, x)\nopt=tf.keras.optimizers.SGD(lr=1e-4, momentum=0.9)\nmodel.compile(optimizer=opt,\n              loss='categorical_crossentropy',\n              metrics=['accuracy',m]\n             )\nhistory = model.fit(resnet_features, y, batch_size=16, epochs=100, validation_split=0.3, callbacks=[early])","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Plot Accuracy and Validation Curve"},{"metadata":{"trusted":true},"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Save and Load Model"},{"metadata":{"trusted":true},"cell_type":"code","source":"import keras\nmodel_name = \"model1.h5\"\nmodel.save(os.getcwd() + \"/\" + model_name)\nreconstructed_model = keras.models.load_model(os.getcwd() + \"/\" + model_name)\nreconstructed_model","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Flask App"},{"metadata":{"trusted":true},"cell_type":"code","source":"from flask import Flask, render_template, request, jsonify\nfrom PIL import Image\nimport os\nimport io\nimport sys\nimport numpy as np\nimport cv2\nimport base64\nfrom io import BytesIO\n\napp = Flask(__name__)\n\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef get_image():\n#     data = request.json[\"image\"]\n    if request.method == \"GET\":\n        return jsonify({\"error\": \"Hi\"})\n    else:\n        data = request.json[\"image\"]\n        print(data)\n        convert_and_save(data)\n        return jsonify({\"success\": \"image Recieved!\"})\n\n\ndef convert_and_save(b64_string):\n    # with open(\"imageToSave.jpg\", \"wb\") as fh:\n    with open(\"imageToSave.jpg\", \"wb\") as fh:\n        fh.write(base64.decodebytes(b64_string.encode('utf-8')))\n        # img = base64.decodebytes(b64_string.encode('utf-8'))\n#         im = Image.open(\"imageToSave.jpg\")\n#         im.show()\n\n    # fh.write(base64.decodebytes(b64_string.encode()))\ndef get_features(MODEL,cnn_model ,data=X):\n    \n    inputs = Input((width, width, 3))\n    x = inputs\n    x = Lambda(preprocess_input, name='preprocessing')(x)\n    x = cnn_model(x)\n    x = GlobalAveragePooling2D()(x)\n    cnn_model = Model(inputs, x)\n    features = cnn_model.predict(data, batch_size=64, verbose=1)\n    return features\n\n\ndef get_prediction(Model , cnn_model, image,labels):\n\n    classes = list(sorted(set(labels[\"breed\"])))\n    width = 331\n    test = np.zeros((1, width, width, 3), dtype=np.uint8)\n    test [0] = image\n    test_feature = get_features(MODEL,cnn_model, data=X)\n    y_pred = reconstructed_model.predict(test_feature, batch_size=128)\n    max_prob = sorted(y_pred[i], reverse = True)[:5]\n    pred_breed = one_hot.columns[list(y_pred[i]).index(max_prob[0])]\n    \n    return jsonify({\"class\": pred_breed,\n                    \"prob\":max_prob * 1000 })\n    \n\n\nif __name__ == '__main__':\n    print(\"loading model  : \")\n    cnn_model = ResNet50(include_top=False, input_shape=(width, width, 3), weights='imagenet')\n    trained_model = keras.models.load_model(os.getcwd() + \"/\" + model_name)\n    print(\"model loaded\")\n    labels = pd.read_csv(\"../input/dog-breed-identification/labels.csv\")\n        \n    app.run(port=3030, debug=True)\n  \n    img_test = cv2.imread(os.getcwd()+\"/\" + \"imageToSave.jpg\" )\n    resized_image = cv2.resize(img_test,(331,331))\n    get_prediction(trained_model , cnn_model, image,labels) \n    \n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"for b in breed:\n    df_test[b] = y_pred[:,class_to_num[b]]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"ss = pd.read_csv(\"../input/dog-breed-identification/sample_submission.csv\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df_test.to_csv('submission.csv', index=None)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}